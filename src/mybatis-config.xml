<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>

    <properties resource="db.properties"/>

    <!--

    设置与数据库交互的环境
    例如可以在此处配置二级缓存，配置查询延迟加载策略等等...
        配置的目的是为了更加有效的查询表中的记录

    在实际项目开发中，settings的设置基本没用
    因为settings对于查询的优化，得到的效果不明显

    对于海量级别的数据，使用settings配置优化，起不到任何的效果
    对于数据量较少的项目，对于查询的效率要求的比较低，也没有必要使用settings配置

    如果遇到了海量级别的数据，我们如何去提高查询的效率呢？

    基础操作
        对于常用的查询条件的字段，设置索引

    高级操作
        使用nosql数据库，redis

    专业操作
        Elasticsearch与Solr
        针对于电商行业
        select * from tbl_product where name like '%手机%'


-->

    <settings>
        <!-- 该配置影响的所有映射器中配置的缓存的全局开关，默认值true -->
        <setting name="cacheEnabled" value="true"/>

        <!-- 延迟加载的全局开关，当开启时，所有关联对象都会延迟加载，
        特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态，默认值false -->
        <setting name="lazyLoadingEnabled" value="true"/>
    </settings>

    <typeAliases>

        <!--
            方式1：
                为指定的类分别起别名，别名的命名由我们自己来决定
                type:要为哪个domain起别名，填写包名.类名称
                alias:别名的名字
         -->

        <!--<typeAlias type="com.vge.domain.Student" alias="stu"/>-->

        <!--
            方式2：
                使用package标签批量起别名
                别名是MyBatis默认为我们取好的，命名不是由我们自己决定的
                别名为类名（类名的字母不区分大小写）
                但是建议写类名（Student），或者首字母小写(student)。

                name:指定一个包结构，表示在该包下，所有的domain自动起好了别名

            总结：
                1、未来实现项目开发中，公司要求使用起别名的机制，我们要使用批量起别名的方式2
                2、在市场上，也有很多企业，摒弃方式2,根本就不用！
                    公司会认为将domain写成全路径， 可以有效的提供代码的可读性

        -->
        <package name="com.vge.domain"/>

    </typeAliases>


    <!-- 以下是连接数据库的环境 -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <mappers>
        <!--
        方式1:
            使用resource属性，指定mapper映射文件
        -->

        <!--<mapper resource="com/vge/dao/StudentDao.xml"/>-->

        <!--
         方式2：用的不多
             使用class属性，找到dao层接口的全路径
     -->
        <!-- <mapper class="com.vge.dao.StudentDao"/>-->

        <!--
    方式3：
        批量注册
        name属性：指向dao层的包，表示在该dao包下，所有的mapper映射文件自动注册

        总结：在未来的实际项目开发中，选择方式3
    -->
        <package name="com.vge.dao"/>
    </mappers>
</configuration>